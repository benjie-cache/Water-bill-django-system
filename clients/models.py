from django.db import models
from phonenumber_field.modelfields import PhoneNumberField
from django.utils.text import slugify

from datetime import datetime
from multiselectfield import MultiSelectField
import random
import string
# Create your models here.
MONTHS_SELECT = [
    ('jan', 'January'),
    ('feb', 'February'),
    ('mar', 'March'),
    ('apr', 'April'),
    ('may', 'May'),
    ('jun', 'June'),
    ('jul', 'July'),
    ('aug', 'August'),
    ('sep', 'September'),
    ('oct', 'October'),
    ('nov', 'November'),
    ('dec', 'December'),
]
PAYMENT_STATUS_CHOICES = [
    ('approved', 'Approved'),
    ('rejected', 'Rejected'),
    ('pending', 'Pending'),
]

class WaterMeter(models.Model):
    meter_number=models.IntegerField(primary_key=True)

    custom_er = models.OneToOneField('customer', on_delete=models.CASCADE)
    created = models.DateTimeField(default=datetime.now)
    updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.meter_number} - {self.custom_er}"        
class Customer(models.Model):
    
    full_name = models.CharField(max_length=100)
    slug = models.SlugField(max_length=100,unique=True, blank=True, null=True, help_text='This field is autogenerated')
    address_line = models.CharField(max_length=150)
    metre_number = models.OneToOneField(WaterMeter, on_delete=models.DO_NOTHING,max_length=10,unique=True,blank=True,
                                        null=True,related_name='customers')
    
    active_phone_number = PhoneNumberField()
    
    def __str__(self):
            return f"{self.full_name}"
    def save(self, *args, **kwargs):
            if not self.slug:
                        self.slug = '-'.join((slugify(self.metre_number), slugify(self.full_name)))
                        super(Customer, self).save(*args, **kwargs)

class WaterBilling(models.Model):
       
    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)
   
    bill_code = models.CharField(
        max_length=15, unique=True, null=True, blank=True)
    meter_number = models.ForeignKey('WaterMeter', on_delete=models.CASCADE)
    units = models.DecimalField(
        decimal_places=2, max_digits=9, default=0, null=True, blank=True)
    unit_price = models.DecimalField(
        decimal_places=2, max_digits=9, verbose_name='Unit Price (KES)',default=145.0)
    total = models.DecimalField(decimal_places=2, max_digits=9, default=0)
    amount_paid = models.DecimalField(
        decimal_places=2, max_digits=9, default=0)
    month = MultiSelectField(choices=MONTHS_SELECT, null=True, blank=True)
    meter_rent = models.DecimalField(
        decimal_places=2, max_digits=9, default=100)
    remarks = models.TextField(blank=True, null=True)
    cleared = models.BooleanField(default=False)
    
    from_date = models.DateField(null=True, blank=True)
    to_date = models.DateField(null=True, blank=True)
    due_date = models.DateField(null=True, blank=True)
    added = models.DateTimeField(default=datetime.now)
    updated = models.DateTimeField(auto_now_add=True)

    def amount_remaining(self):
        r_amount = self.total-self.amount_paid
        return r_amount
    def save(self, *args, **kwargs):
            if not self.bill_code:
                self.bill_code = ''.join(
                random.choices(string.ascii_lowercase, k=10))
            if self.units:
                self.total = (self.units*self.unit_price)+self.meter_rent
            if self.amount_paid != 0:
                if self.total <= self.amount_paid:
                    self.cleared = True
                else:
                    self.cleared = False
                # to easen report generation
        
            super(WaterBilling, self).save(*args, **kwargs)
    def days_due(self):
        current_time=datetime.now()
        due_days=int(current_time.day)-int(self.due_date.day)
        return due_days

    def __str__(self):
        return f'{self.bill_code} - {self.customer}'

    class Meta:
        verbose_name_plural = 'Water Billing Cycles'
class WaterConsumption(models.Model):
    parent = models.ForeignKey(WaterBilling, on_delete=models.CASCADE)
    previous_reading = models.DecimalField(max_digits=9, decimal_places=2)
    current_reading = models.DecimalField(max_digits=9, decimal_places=2)
    consumption = models.DecimalField(
        max_digits=9, decimal_places=2, default=0)
    reading_added = models.DateField()

    def save(self, *args, **kwargs):
        if self.current_reading:
            self.consumption = self.current_reading-self.previous_reading
            super(WaterConsumption, self).save(*args, **kwargs)
        super(WaterConsumption, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.reading_added}"        
class WaterPayments(models.Model):
    parent = models.ForeignKey(WaterBilling, on_delete=models.CASCADE)
    tracking_code = models.CharField(
        max_length=15, unique=True, blank=True, null=True)
    payment_code = models.CharField(max_length=30)
    amount = models.DecimalField(decimal_places=2, max_digits=9)
    payment_method = models.CharField(
        max_length=30, help_text="e.g. MPESA, KCB ...")
    date_paid = models.DateField()
    status = models.CharField(
        max_length=10, default='pending', choices=PAYMENT_STATUS_CHOICES)
    remarks = models.TextField(
        blank=True, null=True, max_length=155, verbose_name="Message?")
    lock = models.BooleanField(default=False)
    created = models.DateTimeField(default=datetime.now)
    updated = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        if not self.tracking_code:
            self.tracking_code = ''.join(random.choices(
                string.ascii_letters+string.digits, k=10))
        if self.status == 'approved':
            self.lock = True
            super(WaterPayments, self).save(*args, **kwargs)
        super(WaterPayments, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.payment_code}"

    class Meta:
        verbose_name = 'Billing 2 | Water Billing Payments'
        verbose_name_plural = verbose_name
